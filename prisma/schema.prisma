generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  profile      Profile?
  accounts      Account[]
  quests Quest[]
  sessions      Session[]
  journal         Journal[]
  activities    Activity[]
  mood Mood[]
  isDeleted     Boolean   @default(false)

  @@index([email])
}

enum Level {
  Eden
  Alpha
  Omega
  Titan
  Zenith
  GodMode
}

model Profile {
  id     String    @id @default(cuid())
  name   String?
  perference  String[]
  level  Level
  score Int @default(0)
  userId String @unique
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}


enum DailyQuestActivity {
  DEEP_BREATH
  Affirmation
  Chat
  Activity
  Journaling
}

model DailyActivity {
  id   String   @id @default(cuid())
  point Int
  type DailyQuestActivity
  questId String
  isCompleted Boolean @default(false)
  quest  Quest  @relation(fields: [questId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Quest {
  id     String    @id @default(cuid())
  affirmationCategories String[]
  suggestedAffirmationCategories String[]
  isGoalSetup Boolean @default(false)
  hasAffirmationCategories Boolean @default(false)
  goal Goal?
  questActivities DailyActivity[]
  activeStep DailyQuestActivity @default(DEEP_BREATH)
  isActive Boolean
  endDate DateTime
  userId String
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyTherapySessions       DailyTherapySession[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)
}





model DailyTherapySession {
  id           String   @id @default(cuid())
  questId      String
  quest        Quest    @relation(fields: [questId], references: [id])
  start         DateTime
  isActive Boolean @default(false)
  end           DateTime
  focus        String   // The focus of the therapy session
  messages     Message[] // Messages exchanged between user and therapist
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Message {
  id           String   @id @default(cuid())
  isRoot       Boolean @default(false)
  sessionId    String
  session      DailyTherapySession @relation(fields: [sessionId], references: [id])
  sender       String   // "user" or "therapist"
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ActivityType {
  BREATHING
  MEDITATION
  YOGA
  FOCUS
  THERAPY
  FITNESS
  // Add more activity types as needed
}

model Activity {
  id        String   @id @default(cuid())
  type      ActivityType
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mood {
  id  String    @id @default(cuid())
  mood         String
  score Float
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}



model Goal {
  id String    @id @default(cuid())
  name String
  createdAt    DateTime  @default(now())
  questId String @unique
  quest   Quest      @relation(fields: [questId], references: [id], onDelete: Cascade)
  isCompleted    Boolean   @default(false)
  updatedAt    DateTime  @updatedAt
}

model Journal {
  id           String    @id @default(cuid())
  userMood     Float
  mood         Float
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  note       String?
  canEdit    Boolean   @default(false)
  therapy    Therapy[]
  createdAt    DateTime  @default(now())
  isDeleted    Boolean   @default(false)
  updatedAt    DateTime  @updatedAt

  @@unique([id, userId])
  @@index([userId])
}



model Therapy {
  id         String    @id @default(cuid())
  question   String
  answer     String    @db.Text
  journalId  String
  journal    Journal   @relation(fields: [journalId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isDeleted  Boolean   @default(false)
}
